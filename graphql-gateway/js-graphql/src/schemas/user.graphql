type User {
  id: ID!
  email: String!
  "Use for login and identify, unique"
  username: String!
  password: String!
  info: UserInfo
  following: [User!]
  bits: [Bit!]
}

input FindUserInput {
    id: ID
    email: String
    username: String
}

type Query {
  "Get current User"
  me: User
  findUser(input: FindUserInput!): User
  user: User
  users: [User!]
}

enum Gender {
  MALE
  FEMALE
  OTHER
  HIDDEN
}

type UserInfo {
  "User custom name, can duplicate"
  nickname: String
  "Hashed password"
  gender: Gender
  phone: String
  language: [String!]
  "ISO8601 format"
  birthday: String
  age: Int
}

input UpdateInfoInput {
    nickname: String
    gender: Gender
    phone: String
    language: [String!]
    birthday: String
    age: Int
}

input RegisterInput {
    email: String!
    username: String!
    nickname: String
    password: String!
}

input LoginInput {
  username: String
  email: String
  password: String!
}

type Token {
  token: String!
}

type Mutation {
    "Update My Info"
    updateInfo(input: UpdateInfoInput!): User
    register(input: RegisterInput!): User
    login(input: LoginInput!): Token
    deleteUser(id: ID): Boolean
    followUser(id: ID!): User
}
